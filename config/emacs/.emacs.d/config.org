* Emacs Configuration

** Early Init
#+begin_src emacs-lisp
  (setq package-enable-at-startup nil)
#+end_src

** Setup Minimal Frame
#+begin_src emacs-lisp
  ;; Disable toolbar
  (tool-bar-mode -1)

  ;; Disable menu bar
  (menu-bar-mode -1)

  ;; Disable scroll bar
  (scroll-bar-mode -1)
#+end_src

** Straight
#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name
          "straight/repos/straight.el/bootstrap.el"
          (or (bound-and-true-p straight-base-dir)
              user-emacs-directory)))
        (bootstrap-version 7))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  (straight-use-package 'use-package)
#+end_src


** Initial Setup
#+BEGIN_SRC emacs-lisp
  (use-package emacs
    :ensure t
    :init
    (setq use-package-always-ensure t)
    ;; This is for Magit, to be able to use SSH via gpg for git
    (setenv "SSH_AUTH_SOCK" (shell-command-to-string "gpgconf --list-dirs agent-ssh-socket | tr -d '\n'"))

    (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
    (add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/"))
    (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/"))
    (add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/"))
    ;; (unless (package-installed-p 'vc-use-package)
    ;;   (package-vc-install "https://github.com/slotThe/vc-use-package"))
    )
#+END_SRC

** General Settings
#+BEGIN_SRC emacs-lisp
  ;; Your Emacs Lisp code for general settings...
  (setq inhibit-startup-screen t)
  (setq column-number-mode t)

  ;; On a UK layout, hashtag is bound to Alt+3, but in Emacs that's usually C-u 3. Either change to US layout (but lose Â£) or remap M-3 to hashtag
  (define-key key-translation-map (kbd "M-3") (kbd "#"))

  ;; Enable smooth scroll
  (pixel-scroll-precision-mode t)
#+END_SRC

** Repeat-mode

#+begin_src emacs-lisp
  (repeat-mode 1)
#+end_src

** Theme Configuration
#+BEGIN_SRC emacs-lisp
  ;; Install gruvbox themesx
  ;; (use-package gruvbox-theme
  ;;   :ensure t
  ;;   :config (load-theme 'gruvbox-dark-medium t))
  (use-package modus-themes
    :ensure t
    :config
    (setq modus-themes-bold-constructs t
          modus-themes-italic-constructs t
          modus-themes-mixed-fonts t
          modus-themes-subtle-line-numbers t
          modus-themes-variable-pitch-ui t)
    (setq modus-themes-org-blocks 'gray-background) ;; {nil,'gray-background,'tinted-background}
    (modus-themes-load-theme 'modus-vivendi-tinted))
#+END_SRC

** Font Configuration
#+begin_src emacs-lisp
  (set-face-attribute 'default nil
                      :family "Monaspace Neon Var"
                      :height 140
                      :weight 'normal
                      :width 'normal)
#+end_src

** Treesitter & LSP
#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
  (add-to-list 'auto-mode-alist '("\\.cppm\\'" . c++-mode))
  (add-to-list 'auto-mode-alist '("\\.ixx\\'" . c++-mode))

  (add-to-list 'auto-mode-alist '("\\.ts\\'" . tsx-mode))
  (add-to-list 'auto-mode-alist '("\\.js\\'" . tsx-mode))

  (add-to-list 'auto-mode-alist '("\\.cmake\\'" . cmake-mode))
  (add-to-list 'auto-mode-alist '("CMakeLists\\.txt\\'" . cmake-mode))

  (defun treesit-install-all-grammars () (interactive)
         (dolist (lang treesit-language-source-alist)
           (unless (treesit-language-available-p (car lang))
             (treesit-install-language-grammar (car lang)))))

  (use-package treesit
    :ensure nil
    :init
    (setq treesit-language-source-alist
          '(
            (bash "https://github.com/tree-sitter/tree-sitter-bash")
            (c "https://github.com/tree-sitter/tree-sitter-c")
            (cpp "https://github.com/tree-sitter/tree-sitter-cpp")
            (cmake "https://github.com/uyha/tree-sitter-cmake")
            (css . ("https://github.com/tree-sitter/tree-sitter-css"))
            (c-sharp . ("https://github.com/tree-sitter/tree-sitter-c-sharp"))
            (dockerfile . ("https://github.com/camdencheek/tree-sitter-dockerfile"))
            (elisp "https://github.com/Wilfred/tree-sitter-elisp")
            (go "https://github.com/tree-sitter/tree-sitter-go")
            (html . ("https://github.com/tree-sitter/tree-sitter-html"))
            (haskell . ("https://github.com/tree-sitter/tree-sitter-haskell"))
            (java . ("https://github.com/tree-sitter/tree-sitter-java"))
            (javascript . ("https://github.com/tree-sitter/tree-sitter-javascript"))
            (json . ("https://github.com/tree-sitter/tree-sitter-json"))
            (make "https://github.com/alemuller/tree-sitter-make")
            (markdown "https://github.com/ikatyang/tree-sitter-markdown")
            (python "https://github.com/tree-sitter/tree-sitter-python")
            (ruby . ("https://github.com/tree-sitter/tree-sitter-ruby"))
            (rust "https://github.com/tree-sitter/tree-sitter-rust")
            (toml "https://github.com/tree-sitter/tree-sitter-toml")
            (tsx "https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src")
            (typescript . ("https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src"))
            (yaml . ("https://github.com/ikatyang/tree-sitter-yaml"))
            )
          )
    (setq treesit-load-name-override-list '((c++ "libtree-sitter-cpp" "tree_sitter_cpp")))
    (setq treesit-load-name-override-list '((csharp "libtree-sitter-c-sharp")))
    (setq treesit-load-name-override-list '((js "libtree-sitter-javascript" "tree_sitter_javascript")))
    :config
    (treesit-install-all-grammars)
    (setq major-mode-remap-alist
          '(
            (bash-mode . bash-ts-mode)
            (c-mode . c-ts-mode)
            (c++-mode . c++-ts-mode)
            (cmake-mode . cmake-ts-mode)
            (css-mode . css-ts-mode)
            (csharp-mode . csharp-ts-mode)
            (dockerfile-mode . dockerfile-ts-mode)
            (elisp-mode . elisp-ts-mode)
            (go-mode . go-ts-mode)
            (haskell-mode . haskell-ts-mode)
            (html-mode . html-ts-mode)
            (java-mode . java-ts-mode)
            (js-mode . js-ts-mode)
            (json-mode . json-ts-mode)
            (make-mode . make-ts-mode)
            (markdown-mode . markdown-ts-mode)
            (python-mode . python-ts-mode)
            (ruby-mode . ruby-ts-mode)
            (rust-mode . rust-ts-mode)
            (toml-mode . toml-ts-mode)
            (tsx-mode . tsx-ts-mode)
            (typescript-mode . typescript-ts-mode)
            (yaml-mode . yaml-ts-mode)
            )
          )
    )

  (use-package eglot
    :ensure t
    :init
    (fset #'jsonrpc--log-event #'ignore) ;; performance boost
    :config
    (add-to-list 'eglot-server-programs '(c-ts-mode "/opt/homebrew/opt/llvm/bin/clangd"))
    (add-to-list 'eglot-server-programs '(c++-ts-mode "/opt/homebrew/opt/llvm/bin/clangd"))
    ;; OR: (add-to-list 'eglot-server-programs '((c-ts-mode c++-ts-mode) "/opt/homebrew/opt/llvm/bin/clangd"))
    ;; :bind (:map eglot-mode-map
    ;; 	      ("C-c d" . eglot-help-at-point))
    :hook
    (bash-ts-mode . eglot-ensure)
    (c-ts-mode . eglot-ensure)
    (c++-ts-mode . eglot-ensure)
    (cmake-ts-mode . eglot-ensure)
    (css-ts-mode . eglot-ensure)
    (dockerfile-ts-mode . eglot-ensure)
    (elisp-ts-mode . eglot-ensure)
    (go-ts-mode . eglot-ensure)
    (html-ts-mode . eglot-ensure)
    (java-ts-mode . eglot-ensure)
    (js-ts-mode . eglot-ensure)
    (json-ts-mode . eglot-ensure)
    (make-ts-mode . eglot-esnure)
    (markdown-ts-mode . eglot-ensure)
    (python-ts-mode . eglot-ensure)
    (ruby-ts-mode . eglot-ensure)
    (rust-ts-mode . eglot-ensure)
    (toml-ts-mode . eglot-ensure)
    (tsx-ts-mode . eglot-ensure)
    (typescript-ts-mode . eglot-ensure)
    (yaml-ts-mode . eglot-ensure)
    )

  (use-package flymake
    :bind (:map flymake-mode-map
                ("M-n" . flymake-goto-next-error)
                ("M-p" . flymake-goto-prev-error)))

#+end_src

** Wgrep
#+begin_src emacs-lisp
  (use-package wgrep
    :ensure t)
#+end_src

** Vertico
#+begin_src emacs-lisp
  ;; Enable vertico
  (use-package vertico
    :ensure t
    :init
    (vertico-mode)

    ;; Different scroll margin
    ;; (setq vertico-scroll-margin 0)

    ;; Show more candidates
    ;; (setq vertico-count 20)

    ;; Grow and shrink the Vertico minibuffer
    ;; (setq vertico-resize t)

    ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
    ;; (setq vertico-cycle t)
    )

  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package savehist
    :ensure t
    :init
    (savehist-mode))

  ;; A few more useful configurations...
  (use-package emacs
    :ensure t
    :init
    ;; Add prompt indicator to `completing-read-multiple'.
    ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
    (defun crm-indicator (args)
      (cons (format "[CRM%s] %s"
                    (replace-regexp-in-string
                     "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                     crm-separator)
                    (car args))
            (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
    ;; Vertico commands are hidden in normal buffers.
    ;; (setq read-extended-command-predicate
    ;;       #'command-completion-default-include-p)

    ;; Enable recursive minibuffers
    (setq enable-recursive-minibuffers t))
#+end_src

** Marginalia
#+begin_src emacs-lisp
  (use-package marginalia
    :ensure t
    ;; Bind `marginalia-cycle' locally in the minibuffer.  To make the binding
    ;; available in the *Completions* buffer, add it to the
    ;; `completion-list-mode-map'.
    :bind (:map minibuffer-local-map
                ("M-A" . marginalia-cycle))

    ;; The :init section is always executed.
    :init

    ;; Marginalia must be activated in the :init section of use-package such that
    ;; the mode gets enabled right away. Note that this forces loading the
    ;; package.
    (marginalia-mode))
#+end_src

** Corfu
#+begin_src emacs-lisp
  (use-package corfu
    :ensure t
    ;; Optional customizations
    :custom
    ;; (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
    (corfu-auto t)                 ;; Enable auto completion
    ;; (corfu-separator ?\s)          ;; Orderless field separator
    ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
    (corfu-quit-no-match 'separator)      ;; Quit completion eagerly, such that the popup stays out of your way when unexpected
    ;; (corfu-preview-current nil)    ;; Disable current candidate preview
    ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
    ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
    ;; (corfu-scroll-margin 5)        ;; Use scroll margin

    ;; Enable Corfu only for certain modes.
    ;; :hook ((prog-mode . corfu-mode)
    ;;        (shell-mode . corfu-mode)
    ;;        (eshell-mode . corfu-mode))

    ;; Recommended: Enable Corfu globally.  This is recommended since Dabbrev can
    ;; be used globally (M-/).  See also the customization variable
    ;; `global-corfu-modes' to exclude certain modes.
    :init
    (global-corfu-mode))

  ;; A few more useful configurations...
  (use-package emacs
    :ensure t
    :init
    ;; TAB cycle if there are only few candidates
    (setq completion-cycle-threshold 3)

    ;; Emacs 28: Hide commands in M-x which do not apply to the current mode.
    ;; Corfu commands are hidden, since they are not supposed to be used via M-x.
    ;; (setq read-extended-command-predicate
    ;;       #'command-completion-default-include-p)

    ;; Enable indentation+completion using the TAB key.
    ;; `completion-at-point' is often bound to M-TAB.
    (setq tab-always-indent 'complete))

  ;; Use Dabbrev with Corfu!
  (use-package dabbrev
    :ensure t
    ;; Swap M-/ and C-M-/
    :bind (("M-/" . dabbrev-completion)
           ("C-M-/" . dabbrev-expand))
    :config
    (add-to-list 'dabbrev-ignored-buffer-regexps "\\` ")
    ;; Since 29.1, use `dabbrev-ignored-buffer-regexps' on older.
    (add-to-list 'dabbrev-ignored-buffer-modes 'doc-view-mode)
    (add-to-list 'dabbrev-ignored-buffer-modes 'pdf-view-mode))
#+end_src

** Orderless
#+begin_src emacs-lisp
  (use-package orderless
    :ensure t
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src

** kind-icon
#+begin_src emacs-lisp
  (use-package kind-icon
    :ensure t
    :after corfu
                                          ;:custom
                                          ; (kind-icon-blend-background t)
                                          ; (kind-icon-default-face 'corfu-default) ; only needed with blend-background
    :config
    (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))
#+end_src

** Consult
#+begin_src emacs-lisp
  ;; Example configuration for Consult
  (use-package consult
    :ensure t
    ;; Replace bindings. Lazily loaded due by `use-package'.
    :bind (;; C-c bindings in `mode-specific-map'
           ("C-c M-x" . consult-mode-command)
           ("C-c h" . consult-history) ;; Disabled at the moment
           ("C-c k" . consult-kmacro)
           ("C-c m" . consult-man)
           ("C-c i" . consult-info)
           ([remap Info-search] . consult-info)
           ;; C-x bindings in `ctl-x-map'
           ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
           ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
           ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
           ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
           ("C-x t b" . consult-buffer-other-tab)    ;; orig. switch-to-buffer-other-tab
           ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
           ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
           ;; Custom M-# bindings for fast register access
           ("M-#" . consult-register-load)
           ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
           ("C-M-#" . consult-register)
           ;; Other custom bindings
           ("M-y" . consult-yank-pop)                ;; orig. yank-pop
           ;; M-g bindings in `goto-map'
           ("M-g e" . consult-compile-error)
           ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
           ("M-g g" . consult-goto-line)             ;; orig. goto-line
           ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
           ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-imenu-multi)
           ;; M-s bindings in `search-map'
           ("M-s d" . consult-find)                  ;; Alternative: consult-fd
           ("M-s c" . consult-locate)
           ("M-s g" . consult-grep)
           ("M-s G" . consult-git-grep)
           ("M-s r" . consult-ripgrep)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi)
           ("M-s k" . consult-keep-lines)
           ("M-s u" . consult-focus-lines)
           ;; Isearch integration
           ("M-s e" . consult-isearch-history)
           :map isearch-mode-map
           ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
           ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
           ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
           ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
           ;; Minibuffer history
           :map minibuffer-local-map
           ("M-s" . consult-history)                 ;; orig. next-matching-history-element
           ("M-r" . consult-history))                ;; orig. previous-matching-history-element

    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0.5
          register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config

    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key "M-.")
    ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-file-register
     consult--source-recent-file consult--source-project-recent-file
     ;; :preview-key "M-."
     :preview-key '(:debounce 0.4 any))

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; "C-+"

    ;; Optionally make narrowing help available in the minibuffer.
    ;; You may want to use `embark-prefix-help-command' or which-key instead.
    ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

    ;; By default `consult-project-function' uses `project-root' from project.el.
    ;; Optionally configure a different project root function.
    ;;;; 1. project.el (the default)
    ;; (setq consult-project-function #'consult--default-project--function)
    ;;;; 2. vc.el (vc-root-dir)
    ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
    ;;;; 3. locate-dominating-file
    ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
    ;;;; 4. projectile.el (projectile-project-root)
    ;; (autoload 'projectile-project-root "projectile")
    ;; (setq consult-project-function (lambda (_) (projectile-project-root)))
    ;;;; 5. No project support
    ;; (setq consult-project-function nil)
    )
#+end_src

** Embark
#+begin_src emacs-lisp
  (use-package embark
    :ensure t

    :bind
    (("C-." . embark-act)         ;; pick some comfortable binding
     ("C-;" . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

    :init

    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)

    ;; Show the Embark target at point via Eldoc. You may adjust the
    ;; Eldoc strategy, if you want to see the documentation from
    ;; multiple providers. Beware that using this can be a little
    ;; jarring since the message shown in the minibuffer can be more
    ;; than one line, causing the modeline to move up and down:

    ;; (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
    ;; (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)

    :config

    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))

  ;; Consult users will also want the embark-consult package.
  (use-package embark-consult
    :ensure t ; only need to install it, embark loads it after consult if found
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

** Cape
#+begin_src emacs-lisp
  (use-package cape
    ;; Bind dedicated completion commands
    ;; Alternative prefix keys: C-c p, M-p, M-+, ...
    :bind (("C-c p p" . completion-at-point) ;; capf
           ("C-c p t" . complete-tag)        ;; etags
           ("C-c p d" . cape-dabbrev)        ;; or dabbrev-completion
           ("C-c p h" . cape-history)
           ("C-c p f" . cape-file)
           ("C-c p k" . cape-keyword)
           ("C-c p s" . cape-elisp-symbol)
           ("C-c p e" . cape-elisp-block)
           ("C-c p a" . cape-abbrev)
           ("C-c p l" . cape-line)
           ("C-c p w" . cape-dict)
           ("C-c p :" . cape-emoji)
           ("C-c p \\" . cape-tex)
           ("C-c p _" . cape-tex)
           ("C-c p ^" . cape-tex)
           ("C-c p &" . cape-sgml)
           ("C-c p r" . cape-rfc1345))
    :init
    ;; Add to the global default value of `completion-at-point-functions' which is
    ;; used by `completion-at-point'.  The order of the functions matters, the
    ;; first function returning a result wins.  Note that the list of buffer-local
    ;; completion functions takes precedence over the global list.
    (add-to-list 'completion-at-point-functions #'cape-dabbrev)
    (add-to-list 'completion-at-point-functions #'cape-file)
    (add-to-list 'completion-at-point-functions #'cape-elisp-block)
    ;;(add-to-list 'completion-at-point-functions #'cape-history)
    ;;(add-to-list 'completion-at-point-functions #'cape-keyword)
    ;;(add-to-list 'completion-at-point-functions #'cape-tex)
    ;;(add-to-list 'completion-at-point-functions #'cape-sgml)
    ;;(add-to-list 'completion-at-point-functions #'cape-rfc1345)
    ;;(add-to-list 'completion-at-point-functions #'cape-abbrev)
    ;;(add-to-list 'completion-at-point-functions #'cape-dict)
    ;;(add-to-list 'completion-at-point-functions #'cape-elisp-symbol)
    ;;(add-to-list 'completion-at-point-functions #'cape-line)
    )
#+end_src

** Magit
#+begin_src emacs-lisp
  (use-package magit
    :ensure t)
#+end_src

** Line Numbers & Highlight line
#+begin_src emacs-lisp
  (setq display-line-numbers-type 'relative)
  (global-display-line-numbers-mode t)

  (global-hl-line-mode t)

#+end_src

** Org mode
#+begin_src emacs-lisp
  (use-package org
    :ensure t
    :pin org
    :custom
    (org-directory (file-truename "~/org/"))
    (org-agenda-files '("~/org/inbox.org"
                        "~/org/meetings.org"
                        "~/org/projects.org"
                        "~/org/journal.org"
                        "~/org/notes.org"
                        "~/org/bookmarks.org"
                        "~/org/habits.org"))
    (org-startup-indented t)
    :bind (
           ("C-c o l" . org-store-link)
           ("C-c o a" . org-agenda)
           ("C-c o c" . org-capture))
    :config
    (setq org-status-folded 'showall)
    (setq org-return-follows-link t)
    (setq org-capture-templates
          '(
            ("t" "Todo" entry (file "~/org/inbox.org")
             "* TODO %?\n  %i")
            ("m" "Meeting" entry (file "~/org/meetings.org")
             "* MEETING with %? :meeting:\n%U\n** Participants\n- [ ] \n** Agenda\n** Notes\n")
            ("p" "Project Task" entry (file+headline "~/org/projects.org" "Projects")
             "* TODO %? :project:\n  %i\n  %a")
            ("j" "Journal" entry (file+datetree "~/org/journal.org")
             "* %?\nEntered on %U\n  %i\n  %a")
            ("n" "Quick Note" entry (file "~/org/notes.org")
             "* %? :note:\n%U\n  %i\n  %a")
            ("b" "Bookmark" entry (file+headline "~/org/bookmarks.org" "Bookmarks")
             "* %? :bookmark:\n%U\n  %(org-cliplink-capture)\n  %i\n  %a")
            ("h" "Habit" entry (file "~/org/habits.org")
             "* NEXT %?\n  SCHEDULED: %t .+1d\n  :PROPERTIES:\n  :STYLE: habit\n  :REPEAT_TO_STATE: NEXT\n  :END:\n")
            )
          )
    (setq org-agenda-custom-commands
          '(("t" "All TODOs" todo ""
             ((org-agenda-files '("~/org/inbox.org" "~/org/projects.org"))))
            ("m" "Meetings" agenda ""
             ((org-agenda-files '("~/org/meetings.org"))))
            ("n" "Notes and Bookmarks" alltodo ""
             ((org-agenda-files '("~/org/notes.org" "~/org/bookmarks.org"))))))
    (setq org-todo-keywords
          '((sequence "TODO(t)" "IN-PROGRESS(i)" "|" "DONE(d)")))
    (setq org-log-done 'time)
    (setq org-refile-targets '((nil :maxlevel . 3)
                               (org-agenda-files :maxlevel . 3)))
    (setq org-refile-use-outline-path 'file)
    (setq org-outline-path-complete-in-steps nil)
    (setq org-clock-persist 'history)
    (org-clock-persistence-insinuate)
    )
#+end_src

** Org-Roam
#+begin_src emacs-lisp
  (use-package org-roam
    :ensure t
    :custom
    (org-roam-directory (file-truename "~/org/roam/"))
    (org-roam-dailies-directory "daily/")
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n g" . org-roam-graph)
           ("C-c n i" . org-roam-node-insert)
           ("C-c n c" . org-roam-capture)
           ;; Dailies
           ("C-c n d t" . org-roam-dailies-capture-today)
           ("C-c n d d" . org-roam-dailies-capture-date)
           ("C-c n d g" . org-roam-dailies-goto-today)
           ("C-c n d G" . org-roam-dailies-goto-date))
    :config
    (setq org-roam-capture-templates
          '(
            ("z" "Zettel" plain "%?\n %i"
             :target (file+head "zettels/%<%Y-%m-%d-%H-%M-%S>-${slug}.org" "#+TITLE: ${title}\n#+FILETAGS:\n#+CREATED: %U\n\n")
             :unnarrowed t)
            ("m" "Meeting" plain
             "* Participants: %^{Participants}\n* Date: %U\n\n%?"
             :target (file+head "meetings/%<%Y-%m-%d-%H-%M-%S>-${slug}.org" "#+TITLE: Meeting: ${title}\n#+FILETAGS: meeting\n\n")
             :unnarrowed t)
            ("p" "Project" plain
             "* Objective: %^{Objective}\n* Key Results: %?\n* Deadline: %^t"
             :target (file+head "projects/%<%Y-%m-%d-%H-%M-%S>-${slug}.org" "#+TITLE: ${title}\n#+FILETAGS: project\n\n")
             :unnarrowed t)
            ("j" "Journal" plain "%?"
             :target (file+head "journal/%<%Y-%m-%d>.org" "#+TITLE: Journal Entry: %<%Y-%m-%d>\n#+FILETAGS: journal\n\n")
             :unnarrowed t)
            ("l" "Literature" plain
             "* Source: %^{Source}\n* Author: %^{Author}\n* Key Insights: %?\n* Link: %^{Link}"
             :target (file+head "literature/%<%Y-%m-%d-%H-%M-%S>-${slug}.org" "#+TITLE: ${title}\n#+FILETAGS: literature\n\n")
             :unnarrowed t)
            ("i" "Idea" plain "%?"
             :target (file+head "ideas/%<%Y-%m-%d-%H-%M-%S>-${slug}.org" "#+TITLE: Idea: ${title}\n#+FILETAGS: idea\n#+CREATED: %U\n\n")
             :unnarrowed t)
            ("r" "Recipe" plain
             "* Ingredients\n\n* Instructions\n%?"
             :target (file+head "cooking/%<%Y-%m-%d-%H-%M-%S>-${slug}.org" "#+TITLE: ${title}\n#+FILETAGS: recipe\n#+STARTUP: inlineimages\n\n")
             :unnarrowed t)
            ))
    (setq org-roam-dailies-capture-templates
          '(("d" "default" entry
             "* %<%I:%M %p>: %?\n %i"
             :target (file+head "%<%Y-%m-%d>.org"
                                "#+TITLE: %<%Y-%m-%d>\n\n"))))
    ;; If you're using a vertical completion framework, you might want a more informative completion interface
    (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
    (org-roam-db-autosync-mode)
    ;; If using org-roam-protocol
    (require 'org-roam-protocol))

  (use-package websocket
    :ensure t
    :after org-roam)

  (use-package org-roam-ui
    :ensure t
    :after org-roam ;; or :after org
    ;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
    ;;         a hookable mode anymore, you're advised to pick something yourself
    ;;         if you don't care about startup time, use
    ;;  :hook (after-init . org-roam-ui-mode)
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))

  (defun consult-ripgrep-org ()
    "Run `consult-ripgrep` in the org directory."
    (interactive)
    (consult-ripgrep org-directory))

  (defun find-file-in-org-directory ()
    "Use `find-file` to open a file from `org-directory`."
    (interactive)
    (let ((default-directory org-directory))
      (call-interactively 'find-file)))

  (global-set-key (kbd "C-c o r") 'consult-ripgrep-org)
  (global-set-key (kbd "C-c o f") 'find-file-in-org-directory)
#+end_src

** Org-Crypt
#+begin_src emacs-lisp
  (require 'org-crypt)
  (org-crypt-use-before-save-magic)
  (setq org-tags-exclude-from-inheritance (quote ("crypt")))
  (setq org-crypt-key "8235C8F4150606ECF6E3A69659E21D7D3A7DC90C")
  (setq auto-save-default nil)
#+end_src

** Eat (Emulate A Terminal)
#+begin_src emacs-lisp
  (use-package eat
    :ensure t)
#+end_src

** Ediff
#+begin_src emacs-lisp
  (setq ediff-split-window-function 'split-window-horizontally)
  (setq ediff-window-setup-function 'ediff-setup-windows-plain)
#+end_src

** Copilot
#+begin_src emacs-lisp
  (use-package copilot
    :straight (:host github :repo "copilot-emacs/copilot.el" :files ("dist" "*.el"))
    :ensure t
    :hook (prog-mode . copilot-mode)
    :bind (:map copilot-completion-map
                ("<tab>" . 'copilot-accept-completion)
                ("TAB" . 'copilot-accept-completion)
                ("C-TAB" . 'copilot-accept-completion-by-word)
                ("C-<tab>" . 'copilot-accept-completion-by-word))
    :config
    )
  ;; you can utilize :map :hook and :config to customize copilot
#+end_src

** GPTel
#+begin_src emacs-lisp
  (defun my-gptel-mode-hook ()
    (setq-local org-startup-truncated nil)
    (setq-local truncate-lines nil)
    )

  (define-prefix-command 'my-gptel-prefix)
  (global-set-key (kbd "C-c c") 'my-gptel-prefix)

  (use-package gptel
    :ensure t
    :bind (
           ("C-c c c" . gptel)
           ("C-c c s" . gptel-send)
           ("C-c c m" . gptel-menu)
           )
    :hook
    (gptel-mode . my-gptel-mode-hook)
    :config
    (setq gptel-api-key (lambda ()
                          (let ((credential (auth-source-search :host "api.openai.com" :user "apikey" :max 1)))
                            (if credential
                                (funcall (plist-get (car credential) :secret))
                              (error "API key not found in .authinfo")))))
    (setq-default gptel-default-mode 'org-mode)
    (setq-default gptel-model "gpt-4-turbo-preview")
    (gptel-make-openai "Perplexity"
      :host "api.perplexity.ai"
      :key (lambda ()
             (let ((credential (auth-source-search :host "api.perplexity.ai" :user "apikey" :max 1)))
               (if credential
                   (funcall (plist-get (car credential) :secret))
                 (error "API key not found in .authinfo"))))
      :endpoint "/chat/completions"
      :stream t
      :models '(
                "codellama-70b-instruct"
                "mixtral-8x7b-instruct"
                "sonar-medium-chat"
                "sonar-medium-online"
                )
      )
    )
#+end_src
